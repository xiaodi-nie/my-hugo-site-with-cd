[{"content":"Overview Google Kubernetes Engine (GKE) provides a managed environment for deploying, managing, and scaling your containerized applications using Google infrastructure. The Kubernetes Engine environment consists of multiple machines (specifically Google Compute Engine instances) grouped together to form a container cluster.\nKubernetes Engine clusters are powered by the Kubernetes open source cluster management system. Kubernetes provides the mechanisms through which you interact with your container cluster. You use Kubernetes commands and resources to deploy and manage your applications, perform administration tasks and set policies, and monitor the health of your deployed workloads.\nKey components and concepts Pods Pods represent and hold a collection of one or more containers. Generally, if you have multiple containers with a hard dependency on each other, you package the containers inside a single pod.\nPods also have volumes attached to them and containers within a pod can share this attached volume through a shared namespace and communicate with each other.\nOne pod had one shared network namespace which means there\u0026rsquo;s one ip address per pod.\nServices Services provide stable endpoints for Pods. They are there to help you communicate with a set of pods, since pods don\u0026rsquo;t tend to be persistent and they sometimes would stop or restart due to reasons like failed liveness or readiness checks, and that would result in different ip addresses.\nServices used labels to point to pods. So all you have to do to add endpoints to a service is giving a label to each pod inside and the service will pick them up and expose them.\nThere are three types of services:\n ClusterIP (internal) \u0026ndash; the default type means that this Service is only visible inside of the cluster NodePort \u0026ndash; gives each node in the cluster an externally accessible IP LoadBalancer \u0026ndash; adds a load balancer from the cloud provider which forwards traffic from the service to Nodes within it.  Deployments Deployments are there to make sure that there are always that amount of pods(replicas) that you want there to be. Deployments use Replica Sets to manage starting and stopping the Pods.\nAnother cool thing about deployments is that it can recreate and start pods on another node automatically if the node that some pods are residing suddenly failed, thus make the pods inside highly available.\nkubectl commands List of commands and example usage can be found on the above qwiklab.\n","description":"Kubernetes and its orchestration basics","id":0,"section":"posts","tags":["cloud computing","containers"],"title":"Kubernetes basics","uri":"http://jan23-website-hosting.s3-website-us-east-1.amazonaws.com/posts/kubernetes/"},{"content":"Nutty Cloud Souffle this is the recipe for my easy souffle\n","description":"","id":3,"section":"posts","tags":null,"title":"Another Post","uri":"http://jan23-website-hosting.s3-website-us-east-1.amazonaws.com/posts/another-post/"},{"content":"Test on continuous delivery with aws codebuild this is an update lalala\n","description":"","id":6,"section":"posts","tags":null,"title":"Test Post on CodeBuild","uri":"http://jan23-website-hosting.s3-website-us-east-1.amazonaws.com/posts/my-first-post/"}]